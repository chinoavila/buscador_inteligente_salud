import streamlit as st
from functools import wraps
from .config import APP_CONFIG, HELP_MESSAGES

def with_status_message(message):
    """
    Decorador para mostrar un mensaje de estado mientras se ejecuta una funci√≥n.

    :param message: Mensaje a mostrar durante la ejecuci√≥n
    :return: Funci√≥n decorada que muestra el mensaje de estado
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            status_placeholder = st.empty()
            with status_placeholder.container():
                st.info(message)
                result = func(*args, **kwargs)
            status_placeholder.empty()
            return result
        return wrapper
    return decorator


@st.dialog("‚ÑπÔ∏è C√≥mo usar la aplicaci√≥n")
def show_instructions(max_segundos):
    """
    Muestra un di√°logo con instrucciones de uso de la aplicaci√≥n.

    :param max_segundos: Tiempo m√°ximo de grabaci√≥n de audio permitido (segundos)
    :return: None
    """
    st.markdown("""
    ### üéØ ¬øQu√© hace esta aplicaci√≥n?
    Te ayuda a encontrar prestadores de salud especializados bas√°ndose en tus s√≠ntomas.
    
    ### ‚úçÔ∏è Escribir s√≠ntomas
    - Describe detalladamente lo que sientes
    - Incluye ubicaci√≥n, intensidad y duraci√≥n
    - Ejemplo: *"Dolor de cabeza intenso en el lado derecho con n√°useas desde hace 2 d√≠as"*
    
    ### üé§ Grabar audio
    - Presiona el micr√≥fono para iniciar/detener
    - Habla claro y describe tus s√≠ntomas
    - M√°ximo **{} segundos** de grabaci√≥n
    
    ### ‚ö†Ô∏è Importante
    Esta herramienta es solo informativa y no reemplaza la consulta m√©dica profesional.
    Siempre consulta con un profesional de la salud para un diagn√≥stico adecuado.
    """.format(max_segundos))


def create_symptom_input_section():
    """
    Crea la secci√≥n de entrada de s√≠ntomas con validaci√≥n.

    :return: M√©todo de entrada seleccionado
    """
    st.markdown("### üìù Describe tus s√≠ntomas")
    
    # Selector de m√©todo de entrada con estilos personalizados
    input_method = create_styled_radio_input()
    
    return input_method


def create_styled_radio_input():
    """
    Crea botones estilizados que funcionan como radio buttons con el tema de la aplicaci√≥n.

    :return: M√©todo de entrada seleccionado
    """
    st.markdown("**Seleccione c√≥mo describir sus s√≠ntomas:**")
    
    # Inicializar el estado si no existe
    if 'input_method' not in st.session_state:
        st.session_state.input_method = "‚úçÔ∏è Escribir"
    
    # Crear dos columnas para los botones
    col1, col2 = st.columns(2, gap="medium")
    
    with col1:
        escribir_selected = st.session_state.input_method == "‚úçÔ∏è Escribir"
        if st.button(
            "‚úçÔ∏è Escribir", 
            key="btn_escribir",
            use_container_width=True,
            type="primary" if escribir_selected else "secondary"
        ):
            st.session_state.input_method = "‚úçÔ∏è Escribir"
            st.rerun()
    
    with col2:
        audio_selected = st.session_state.input_method == "üé§ Grabar audio"
        if st.button(
            "üé§ Grabar audio", 
            key="btn_audio",
            use_container_width=True,
            type="primary" if audio_selected else "secondary"
        ):
            st.session_state.input_method = "üé§ Grabar audio"
            st.rerun()
    
    return st.session_state.input_method


def create_text_input():
    """
    Crea el √°rea de texto para entrada de s√≠ntomas.

    :return: Texto de s√≠ntomas ingresado por el usuario
    """
    st.markdown("**Describe tus s√≠ntomas con detalle**")
    sintomas_texto = st.text_area(
        "S√≠ntomas",
        placeholder=HELP_MESSAGES["sintomas_texto"]["placeholder"],
        height=120,
        max_chars=APP_CONFIG["max_caracteres_texto"],
        label_visibility="collapsed"
    )
    
    st.markdown(
        '<p class="help-text">üí° Tip: Incluye ubicaci√≥n, intensidad y duraci√≥n para mejores resultados</p>', 
        unsafe_allow_html=True
    )
    
    return sintomas_texto


def create_audio_input():
    """
    Crea la interfaz de grabaci√≥n de audio.

    :return: Datos de audio grabados en bytes o None
    """
    from audio_recorder_streamlit import audio_recorder
    
    st.markdown("**Graba tus s√≠ntomas**")
    st.markdown(
        '<p class="help-text">üé§ Presiona el micr√≥fono y describe claramente tus s√≠ntomas</p>', 
        unsafe_allow_html=True
    )
    
    st.markdown('<div class="audio-container">', unsafe_allow_html=True)
    audio_bytes = audio_recorder(
        text="",
        recording_color="#e8b62c",
        neutral_color="#2E8B57",
        icon_name="microphone",
        icon_size="4x",
        energy_threshold=(-1.0, 1.0),
        pause_threshold=float(APP_CONFIG["max_segundos_audio"]),
    )
    st.markdown('</div>', unsafe_allow_html=True)
    
    return audio_bytes


def display_results(result_data):
    """
    Muestra los resultados del procesamiento de s√≠ntomas.

    :param result_data: Diccionario con los datos del resultado del procesamiento
    :return: None
    """
    if result_data.get('success'):
        # Mostrar transcripci√≥n si existe
        if result_data.get('transcription'):
            st.markdown("**üó£Ô∏è Transcripci√≥n:**")
            st.markdown(f"*{result_data['transcription']}*")
            st.divider()
        
        # Mostrar recomendaciones
        if result_data.get('recommendations'):
            st.markdown("### üéØ Prestadores recomendados")
            st.markdown('<div class="result-box">', unsafe_allow_html=True)
            st.markdown(result_data['recommendations'])
            st.markdown('</div>', unsafe_allow_html=True)
            
        # Bot√≥n para nueva b√∫squeda
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üîÑ Nueva b√∫squeda", type="secondary", use_container_width=True):
                st.rerun()
    else:
        # Mostrar error
        error_message = result_data.get('error_message', 'Error desconocido')
        st.error(f"‚ùå {error_message}")
        
        # Sugerencias basadas en el tipo de error
        if "espec√≠ficos" in error_message.lower():
            st.info("üí° **Sugerencia:** Intenta ser m√°s espec√≠fico sobre:")
            st.markdown("""
            - Ubicaci√≥n exacta del dolor o molestia
            - Intensidad (leve, moderado, intenso)
            - Duraci√≥n (desde cu√°ndo comenz√≥)
            - S√≠ntomas acompa√±antes
            """)
        elif "transcribir" in error_message.lower():
            st.info("üí° **Sugerencia:** Para mejorar la transcripci√≥n:")
            st.markdown("""
            - Habla m√°s claro y despacio
            - Ac√©rcate al micr√≥fono
            - Evita ruidos de fondo
            - Verifica que el micr√≥fono funcione
            """)


def create_search_button(text_symptoms=None, disabled=False):
    """
    Crea el bot√≥n de b√∫squeda con validaci√≥n.

    :param text_symptoms: Texto de s√≠ntomas para validar (opcional)
    :param disabled: Indica si el bot√≥n debe estar deshabilitado
    :return: True si el bot√≥n fue presionado y la entrada es v√°lida
    """
    if text_symptoms is not None:
        # Validar longitud m√≠nima usando configuraci√≥n
        min_length = APP_CONFIG["min_caracteres_texto"]
        is_valid = text_symptoms and len(text_symptoms.strip()) >= min_length
        disabled = disabled or not is_valid
        
        if not is_valid and text_symptoms:
            st.warning(f"‚ö†Ô∏è La descripci√≥n debe tener al menos {min_length} caracteres")
    
    return st.button(
        "üîç Buscar prestadores", 
        type="primary", 
        disabled=disabled,
        use_container_width=True,
        help="Buscar prestadores especializados bas√°ndose en los s√≠ntomas descritos"
    )
